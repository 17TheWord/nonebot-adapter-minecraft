name: Publish to PyPI And Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
env:
  GH_TOKEN: ${{ github.token }}
  PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python environment
        uses: ./.github/actions/setup-python

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(uv version | awk '{print $NF}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and publish
        run: |
          uv build --no-sources
          if [ -n "${{ env.PYPI_API_TOKEN }}" ]; then
            uv publish --token "${{ env.PYPI_API_TOKEN }}"
          else
            uv publish
          fi

      - name: Check if Release exists
        id: check-release
        run: |
          RESPONSE=$(gh release view v${{ env.VERSION }} -R ${{ github.repository }} 2>&1 || true)
          if echo "$RESPONSE" | grep -q "Not Found"; then
            echo "Release v${{ env.VERSION }} does not exist. Skipping deletion."
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Release v${{ env.VERSION }} exists."
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Delete Release if exists
        run: |
          set +e
          gh release delete v${{ env.VERSION }} -R ${{ github.repository }} -y --cleanup-tag
          if [ $? -eq 0 ]; then
            echo "Release v${{ env.VERSION }} deleted successfully."
          else
            echo "Failed to delete release v${{ env.VERSION }}. It might not exist or there might be another issue."
          fi

      - name: Create Release with generate note
        run: gh release create v${{ env.VERSION }} --generate-notes
